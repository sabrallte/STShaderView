package ui;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import interfaces.ITabbedPanel;
import interfaces.IValueSubmittedListener;
import strategys.shadertoy;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author sabrallte
 */
public class ShaderListPanel extends javax.swing.JPanel implements ITabbedPanel{

	
	shadertoy shader;
	List<String> shader_list;
	List<String> shader_list_fullpath;
	
    /**
     * Creates new form ShaderListPanel
     */
    public ShaderListPanel() {
    	shader_list = readShaderDir();
        initComponents();
        
        
		jl_shader_list.setSelectedIndex(0);
		jl_shader_list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		jl_shader_list.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				notifyListeners();
			}
		});
		
		
		jb_reload.addActionListener(new java.awt.event.ActionListener() {
            // Beim Drücken des Menüpunktes wird actionPerformed aufgerufen
            public void actionPerformed(java.awt.event.ActionEvent e) {
        		shader_list = readShaderDir();
        		
        		DefaultListModel<String> model = new DefaultListModel<>();
        				 for(String val : shader_list)
        				         model.addElement(val);
				jl_shader_list.clearSelection();
        		jl_shader_list.setModel(model);
        		System.out.println("Reload Shader lIst;");
        		
            }
        });
    }
    
    
	public List<String> readShaderDir() {
		
		Path p1 = Paths.get("res/shader/fragment/");
		shader_list = new ArrayList<String>();
		shader_list_fullpath = new ArrayList<String>();
		
		try {
			int count = 0;
			Files.walk(Paths.get(p1.toAbsolutePath().toString())).forEach(filePath -> {
			    if (Files.isRegularFile(filePath)) {
			    	shader_list.add(Paths.get(filePath.toString()).getFileName().toString());
			    	shader_list_fullpath.add(Paths.get(filePath.toString()).toString());
			    }
			});
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return shader_list;
		
	}
	
	
	private List<IValueSubmittedListener> listeners = new ArrayList<IValueSubmittedListener>();


    public void addListener(IValueSubmittedListener listener) {
        listeners.add(listener);
    }

    private void notifyListeners() {
    	
    	if (jl_shader_list.getSelectedIndex() < 0) {return;}
    	
        for (IValueSubmittedListener listener : listeners) {
            listener.onSubmitted(shader_list_fullpath.get(jl_shader_list.getSelectedIndex()));
        }
    }


	@Override
	public void onTabSelected() {
		System.out.println("selected available shaders");
		
	}


	@Override
	public void setActiveShader(shadertoy shader) {
		shader = (shadertoy) shader;
		
	}
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jl_shader_list = new javax.swing.JList(shader_list.toArray());
        jb_activate = new javax.swing.JButton();
        jb_delete = new javax.swing.JButton();
        jb_reload = new javax.swing.JButton();

        jl_shader_list.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        jScrollPane1.setViewportView(jl_shader_list);

        jb_activate.setText("Activate");

        jb_delete.setText("Delete");

        jb_reload.setText("Reload");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jb_activate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jb_delete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 173, Short.MAX_VALUE)
                        .addComponent(jb_reload)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_activate)
                    .addComponent(jb_delete)
                    .addComponent(jb_reload))
                .addContainerGap())
        );
    }// </editor-fold>                        


    // Variables declaration - do not modify                     
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jb_activate;
    private javax.swing.JButton jb_delete;
    private javax.swing.JButton jb_reload;
    private javax.swing.JList<String> jl_shader_list;
    // End of variables declaration                   
}
